/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.5
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace brewtheory {
    export class RequestHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            method?: string;
            signature?: Uint8Array;
            sequence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get sequence() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            method?: string;
            signature?: Uint8Array;
            sequence?: number;
        }): RequestHeader {
            const message = new RequestHeader({});
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                method?: string;
                signature?: Uint8Array;
                sequence?: number;
            } = {};
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.method.length)
                writer.writeString(1, this.method);
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (this.sequence != 0)
                writer.writeInt32(3, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.method = reader.readString();
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    case 3:
                        message.sequence = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestHeader {
            return RequestHeader.deserialize(bytes);
        }
    }
    export class ResponseHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
            code?: number;
            scope?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set scope(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            status?: string;
            code?: number;
            scope?: number;
        }): ResponseHeader {
            const message = new ResponseHeader({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
                code?: number;
                scope?: number;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (this.scope != 0)
                writer.writeInt32(3, this.scope);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    case 3:
                        message.scope = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseHeader {
            return ResponseHeader.deserialize(bytes);
        }
    }
}
